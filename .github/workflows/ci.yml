name: 🚀 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: 📦 Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 📦 Install AI Engine Dependencies
        working-directory: ./backend/ai-engine
        run: pip install -r requirements.txt

      - name: 🧹 ESLint - Backend
        working-directory: ./backend
        run: npm run lint

      - name: 🧹 ESLint - Frontend
        working-directory: ./frontend
        run: npm run lint

      - name: 🧹 Python Linting (flake8)
        working-directory: ./backend/ai-engine
        run: |
          pip install flake8 black isort
          flake8 . --max-line-length=88 --extend-ignore=E203,W503
          black --check .
          isort --check-only .

      - name: 🔒 Security Audit - npm
        run: |
          cd backend && npm audit --audit-level=moderate || true
          cd frontend && npm audit --audit-level=moderate || true

      - name: 🔒 Security Audit - Python (Safety)
        working-directory: ./backend/ai-engine
        run: |
          pip install safety
          safety check || true

      - name: 📊 Code Analysis (SonarCloud)
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        component: [backend, frontend, ai-engine, tracking-tag]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        if: matrix.component != 'ai-engine'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🐍 Setup Python
        if: matrix.component == 'ai-engine'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🛠️ Setup Backend Tests
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          npm ci
          cp .env.test.example .env.test

      - name: 🧪 Run Backend Unit Tests
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: "file:./test.db"

      - name: 🛠️ Setup Frontend Tests
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: npm ci

      - name: 🧪 Run Frontend Unit Tests
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: npm run test:ci

      - name: 🛠️ Setup AI Engine Tests
        if: matrix.component == 'ai-engine'
        working-directory: ./backend/ai-engine
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt || pip install pytest pytest-cov pytest-asyncio

      - name: 🧪 Run AI Engine Tests
        if: matrix.component == 'ai-engine'
        working-directory: ./backend/ai-engine
        run: pytest --cov=. --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: .

      - name: 🛠️ Setup Tracking Tag Tests
        if: matrix.component == 'tracking-tag'
        working-directory: ./frontend/tracking-tag
        run: npm ci

      - name: 🧪 Run Tracking Tag Tests
        if: matrix.component == 'tracking-tag'
        working-directory: ./frontend/tracking-tag
        run: npm test

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: |
            backend/coverage/lcov.info
            frontend/coverage/lcov.info
            backend/ai-engine/htmlcov/coverage.xml
          fail_ci_if_error: false
          verbose: true

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        working-directory: ./backend
        run: npm ci

      - name: 📦 Install AI Engine Dependencies
        working-directory: ./backend/ai-engine
        run: pip install -r requirements.txt

      - name: 🗄️ Setup Database
        working-directory: ./backend
        run: |
          npm run prisma:migrate
          npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: 🧪 Run Integration Tests
        working-directory: ./backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          AI_ENGINE_URL: http://localhost:8000

  # E2E Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          cd backend && npm ci
          cd frontend && npm ci

      - name: 🗄️ Setup Test Database
        working-directory: ./backend
        run: |
          npm run prisma:migrate
          npm run prisma:generate
          npm run prisma:seed
        env:
          DATABASE_URL: "file:./test.db"

      - name: 🚀 Start Services
        run: |
          cd backend && npm run dev &
          cd frontend && npm run dev &
          sleep 30

      - name: 📱 Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: 🎭 Run E2E Tests
        working-directory: ./frontend
        run: npm run test:e2e
        env:
          E2E_BASE_URL: http://localhost:3000
          E2E_BACKEND_URL: http://localhost:8000

      - name: 📸 Upload E2E Screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: frontend/e2e/test-results/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        working-directory: ./backend
        run: npm ci

      - name: 🚀 Start Backend Service
        working-directory: ./backend
        run: |
          npm run build
          npm start &
          sleep 10
        env:
          NODE_ENV: production
          DATABASE_URL: "file:./prod.db"

      - name: 📊 Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: ⚡ Run Performance Tests
        working-directory: ./backend
        run: k6 run tests/performance/load-test.js
        env:
          BASE_URL: http://localhost:8000

      - name: 📊 Upload Performance Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: |
            backend/performance-report.json
            backend/performance-summary.html
          retention-days: 30

  # Security Tests
  security-tests:
    name: 🛡️ Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'security')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          cd backend && npm ci
          cd frontend && npm ci

      - name: 🚀 Start Services
        run: |
          cd backend && npm run dev &
          cd frontend && npm run dev &
          sleep 30

      - name: 🛡️ Run OWASP ZAP Security Scan
        run: |
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable \
            zap-baseline.py \
            -t http://host.docker.internal:3000 \
            -g gen.conf \
            -J zap-report.json \
            -r zap-report.html || true

      - name: 🔍 Run npm audit
        run: |
          cd backend && npm audit --audit-level=high --json > backend-audit.json || true
          cd frontend && npm audit --audit-level=high --json > frontend-audit.json || true

      - name: 🔍 Run Python Security Scan (Bandit)
        working-directory: ./backend/ai-engine
        run: |
          pip install bandit[toml]
          bandit -r . -f json -o bandit-report.json || true

      - name: 📊 Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            zap-report.json
            zap-report.html
            backend-audit.json
            frontend-audit.json
            backend/ai-engine/bandit-report.json
          retention-days: 30

  # Build and Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    strategy:
      matrix:
        component: [backend, frontend, ai-engine]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        if: matrix.component != 'ai-engine'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🐍 Setup Python
        if: matrix.component == 'ai-engine'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🏗️ Build Backend
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          npm ci
          npm run build
          npm run prisma:generate

      - name: 🏗️ Build Frontend
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: 🏗️ Build AI Engine
        if: matrix.component == 'ai-engine'
        working-directory: ./backend/ai-engine
        run: |
          pip install -r requirements.txt
          python -m compileall .

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-build
          path: |
            ${{ matrix.component == 'backend' && 'backend/dist' || '' }}
            ${{ matrix.component == 'frontend' && 'frontend/.next' || '' }}
            ${{ matrix.component == 'ai-engine' && 'backend/ai-engine' || '' }}
          retention-days: 7

  # Docker Build
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [backend, frontend, ai-engine]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.component }}-build
          path: ./${{ matrix.component }}/

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deployment (Production)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ai-analytics.your-domain.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your deployment logic here
          # Examples:
          # - Deploy to AWS ECS/EKS
          # - Deploy to Google Cloud Run
          # - Deploy to Azure Container Instances
          # - Deploy to your own servers

      - name: 🏥 Health Check
        run: |
          echo "🏥 Running production health checks..."
          # Add health check logic here

      - name: 📊 Update Monitoring
        run: |
          echo "📊 Updating monitoring dashboards..."
          # Update monitoring/alerting configurations

  # Notification
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 📢 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          text: |
            🚀 Deployment Status: ${{ job.status }}
            📊 Branch: ${{ github.ref }}
            👤 Author: ${{ github.actor }}
            🔗 Workflow: ${{ github.workflow }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

      - name: 📧 Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚀 AI Analytics CI/CD: ${{ job.status }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: AI Analytics CI/CD
          body: |
            Deployment Status: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        if: failure() || success() && github.ref == 'refs/heads/main'