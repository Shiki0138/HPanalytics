// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sites        Site[]
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]

  @@index([email])
  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// Site model
model Site {
  id          String   @id @default(cuid())
  userId      String
  domain      String   @unique
  name        String
  description String?
  isActive    Boolean  @default(true)
  trackingId  String   @unique @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageViews PageView[]
  sessions  Session[]

  @@index([userId])
  @@index([domain])
  @@index([trackingId])
  @@map("sites")
}

// PageView model
model PageView {
  id            String   @id @default(cuid())
  siteId        String
  sessionId     String
  url           String
  path          String
  title         String?
  referrer      String?
  userAgent     String
  ip            String
  country       String?
  city          String?
  deviceType    String?
  browser       String?
  os            String?
  screenWidth   Int?
  screenHeight  Int?
  viewportWidth Int?
  viewportHeight Int?
  duration      Int?     // Time spent on page in seconds
  bounced       Boolean  @default(false)
  createdAt     DateTime @default(now())

  // Relations
  site    Site    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([siteId])
  @@index([sessionId])
  @@index([createdAt])
  @@index([path])
  @@map("page_views")
}

// Session model
model Session {
  id            String   @id @default(cuid())
  siteId        String
  visitorId     String   // Anonymous visitor ID
  userAgent     String
  ip            String
  country       String?
  city          String?
  deviceType    String?
  browser       String?
  os            String?
  referrer      String?
  landingPage   String
  exitPage      String?
  pageCount     Int      @default(0)
  duration      Int      @default(0) // Total session duration in seconds
  bounced       Boolean  @default(true)
  startedAt     DateTime @default(now())
  endedAt       DateTime?

  // Relations
  site      Site       @relation(fields: [siteId], references: [id], onDelete: Cascade)
  pageViews PageView[]

  @@index([siteId])
  @@index([visitorId])
  @@index([startedAt])
  @@map("sessions")
}

// RefreshToken model for JWT refresh tokens
model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

// AuditLog model for tracking user actions
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}